name: Manage Push Subscriptions

on:
  repository_dispatch:
    types: [save_push_subscription, remove_push_subscription]

jobs:
  manage-subscription:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Process subscription data
        id: process
        run: |
          # Get the payload from the dispatch event
          echo "Event type: ${{ github.event.action }}"
          echo "Client payload received for processing"

          # Extract subscription data
          SUBSCRIPTION_ID="${{ github.event.client_payload.subscription.subscriptionId }}"
          ACTION="${{ github.event.client_payload.action }}"
          TIMESTAMP="${{ github.event.client_payload.subscription.timestamp }}"

          echo "subscription_id=${SUBSCRIPTION_ID}" >> $GITHUB_OUTPUT
          echo "action=${ACTION}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Save subscription to secrets
        if: steps.process.outputs.action == 'save'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SUBSCRIPTION_DATA: ${{ toJSON(github.event.client_payload.subscription) }}
        run: |
          SUBSCRIPTION_ID="${{ steps.process.outputs.subscription_id }}"
          SECRET_NAME="PUSH_SUBSCRIPTION_${SUBSCRIPTION_ID}"

          echo "Saving subscription data for ID: $SUBSCRIPTION_ID"

          # Install required packages
          sudo apt-get update && sudo apt-get install -y python3-pip jq
          pip3 install PyNaCl

          # Get repository public key for encryption
          curl -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key" \
               -o repo_key.json

          PUBLIC_KEY=$(jq -r '.key' repo_key.json)
          KEY_ID=$(jq -r '.key_id' repo_key.json)

          # Create Python script for encryption
          cat > encrypt.py << 'EOF'
          import json
          import sys
          import base64
          from nacl import encoding, public

          def encrypt_for_repo(public_key_b64, secret_value):
              public_key = base64.b64decode(public_key_b64)
              sealed_box = public.SealedBox(public.PublicKey(public_key))
              encrypted = sealed_box.encrypt(secret_value.encode('utf-8'))
              return base64.b64encode(encrypted).decode('utf-8')

          public_key = sys.argv[1]
          secret_value = sys.argv[2]
          print(encrypt_for_repo(public_key, secret_value))
          EOF

          # Encrypt subscription data
          ENCRYPTED_VALUE=$(python3 encrypt.py "$PUBLIC_KEY" "$SUBSCRIPTION_DATA")

          # Create the secret
          curl -X PUT \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/actions/secrets/$SECRET_NAME" \
               -d "{\"encrypted_value\":\"$ENCRYPTED_VALUE\",\"key_id\":\"$KEY_ID\"}" \
               -w "Status: %{http_code}\n"

          echo "✅ Subscription $SUBSCRIPTION_ID saved to GitHub Secrets"

      - name: Remove subscription from secrets
        if: steps.process.outputs.action == 'remove'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          SUBSCRIPTION_ID="${{ steps.process.outputs.subscription_id }}"
          SECRET_NAME="PUSH_SUBSCRIPTION_${SUBSCRIPTION_ID}"

          echo "Removing subscription data for ID: $SUBSCRIPTION_ID"

          # Delete the secret
          curl -X DELETE \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/actions/secrets/$SECRET_NAME" \
               -w "Delete Status: %{http_code}\n"

          echo "✅ Subscription $SUBSCRIPTION_ID removed from GitHub Secrets"

      - name: Log operation
        run: |
          echo "📝 Push subscription operation completed:"
          echo "   Action: ${{ steps.process.outputs.action }}"
          echo "   Subscription ID: ${{ steps.process.outputs.subscription_id }}"
          echo "   Timestamp: ${{ steps.process.outputs.timestamp }}"
          echo "   Repository: ${{ github.repository }}"
