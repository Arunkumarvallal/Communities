name: Send Push Notifications

on:
  workflow_dispatch:
    inputs:
      title:
        description: 'Notification Title'
        required: true
        default: 'Tamil Nadu Tech Update'
      body:
        description: 'Notification Body'
        required: true
        default: 'New tech event available!'
      url:
        description: 'Notification URL (optional)'
        required: false
        default: '/'
      test_mode:
        description: 'Test mode (sends to limited recipients)'
        type: boolean
        required: false
        default: true

jobs:
  send-notifications:
    runs-on: ubuntu-latest
    name: Send Push Notifications

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq curl

      - name: Clone subscriptions repo
        env:
          GH_DB_PAT: ${{ secrets.GH_DB_PAT }}
        run: |
          git clone https://x-access-token:${GH_DB_PAT}@github.com/sarveshmrao/communities-notification-subs.git subs_repo

      - name: Get all subscription files
        id: get-files
        run: |
          cd subs_repo
          ls *.json > ../subscription_files.txt || echo "No subscription files found"
          FILE_COUNT=$(wc -l < ../subscription_files.txt)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          echo "First 5 subscription files:"
          head -5 ../subscription_files.txt

      - name: Prepare notification payload
        id: prepare-payload
        run: |
          cat > notification_payload.json << EOF
          {
            "title": "${{ inputs.title }}",
            "body": "${{ inputs.body }}",
            "url": "${{ inputs.url }}",
            "test": ${{ inputs.test_mode }},
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          echo "Notification payload prepared:"
          cat notification_payload.json

      - name: Send notifications to subscribers
        id: send-notifications
        if: steps.get-files.outputs.file_count > 0
        env:
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
        run: |
          npm install -g web-push

          TOTAL_FILES=$(cat subscription_files.txt | wc -l)
          SENT_COUNT=0
          FAILED_COUNT=0

          # Limit in test mode
          if [ "${{ inputs.test_mode }}" = "true" ]; then
            echo "Test mode enabled - limiting to first 3 subscriptions"
            head -3 subscription_files.txt > test_files.txt
            mv test_files.txt subscription_files.txt
            TOTAL_FILES=$(cat subscription_files.txt | wc -l)
          fi

          echo "Processing $TOTAL_FILES subscriptions..."

          NOTIFICATION_PAYLOAD=$(cat notification_payload.json | jq -c .)

          while read -r FILE_NAME; do
            if [ -z "$FILE_NAME" ]; then
              continue
            fi

            echo "Processing subscription file: $FILE_NAME"
            SUBSCRIPTION_DATA=$(cat subs_repo/"$FILE_NAME")
            echo "$SUBSCRIPTION_DATA"

            ENDPOINT=$(echo "$SUBSCRIPTION_DATA" | jq -r '.endpoint // empty')
            P256DH=$(echo "$SUBSCRIPTION_DATA" | jq -r '.keys.p256dh // empty')
            AUTH=$(echo "$SUBSCRIPTION_DATA" | jq -r '.keys.auth // empty')

            if [ -z "$ENDPOINT" ] || [ -z "$P256DH" ] || [ -z "$AUTH" ]; then
              echo "‚ùå Invalid subscription data in $FILE_NAME"
              FAILED_COUNT=$((FAILED_COUNT + 1))
              continue
            fi

            echo "Sending notification to: ${ENDPOINT:0:50}..."

            if web-push send-notification \
              --endpoint="$ENDPOINT" \
              --key="$P256DH" \
              --auth="$AUTH" \
              --vapid-subject="mailto:your-email@domain.com" \
              --vapid-pubkey="$VAPID_PUBLIC_KEY" \
              --vapid-pvtkey="$VAPID_PRIVATE_KEY" \
              --payload="$NOTIFICATION_PAYLOAD" \
              --ttl=3600 2>/dev/null; then
              echo "‚úÖ Successfully sent notification to $FILE_NAME"
              SENT_COUNT=$((SENT_COUNT + 1))
            else
              echo "‚ùå Failed to send notification to $FILE_NAME"
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi

            sleep 0.2

          done < subscription_files.txt

          echo "üéâ Notification send completed!"
          echo "üìä Results:"
          echo "   Total processed: $TOTAL_FILES"
          echo "   Successfully sent: $SENT_COUNT"
          echo "   Failed: $FAILED_COUNT"
          if [ "$TOTAL_FILES" -gt 0 ]; then
            echo "   Success rate: $(( SENT_COUNT * 100 / TOTAL_FILES ))%"
          fi

          echo "total_processed=$TOTAL_FILES" >> $GITHUB_OUTPUT
          echo "sent_count=$SENT_COUNT" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT

      - name: Summary report
        run: |
          echo "## üì± Push Notification Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Notification Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Title: ${{ inputs.title }}" >> $GITHUB_STEP_SUMMARY
          echo "- Body: ${{ inputs.body }}" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ inputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Mode: ${{ inputs.test_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Subscription files found: ${{ steps.get-files.outputs.file_count }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.get-files.outputs.file_count }}" -gt "0" ]; then
            echo "- Notifications sent: ${{ steps.send-notifications.outputs.sent_count || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
            echo "- Failed notifications: ${{ steps.send-notifications.outputs.failed_count || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
            echo "- Total processed: ${{ steps.send-notifications.outputs.total_processed || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ‚ö†Ô∏è No subscribers found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Timestamp: $(date -u)*" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        run: |
          rm -f subscription_files.txt notification_payload.json test_files.txt
          rm -rf subs_repo
