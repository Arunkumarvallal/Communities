name: Send Push Notifications

on:
  workflow_dispatch:
    inputs:
      title:
        description: 'Notification Title'
        required: true
        default: 'Tamil Nadu Tech Update'
      body:
        description: 'Notification Body'
        required: true
        default: 'New tech event available!'
      url:
        description: 'Notification URL (optional)'
        required: false
        default: '/'
      test_mode:
        description: 'Test mode (sends to limited recipients)'
        type: boolean
        required: false
        default: true
  push:
    paths:
      - 'src/data/events.json'

jobs:
  send-notifications:
    runs-on: ubuntu-latest
    name: Send Push Notifications

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure full git history
        run: git fetch --unshallow || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Detect events.json changes
        id: detect-changes
        if: github.event_name == 'push'
        run: |
          echo "Detecting changes in events.json..."

          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "Previous commit exists. Checking diff..."

            git diff --name-only HEAD~1 HEAD > changed_files.txt
            if grep -q "src/data/events.json" changed_files.txt; then
              echo "events_changed=true" >> $GITHUB_OUTPUT

              git show HEAD:src/data/events.json > new_events.json || echo "[]" > new_events.json
              git show HEAD~1:src/data/events.json > old_events.json || echo "[]" > old_events.json

              echo "Comparing for new events..."
              NEW_EVENTS=$(jq -s '.[1] - .[0]' old_events.json new_events.json)

              echo "$NEW_EVENTS" > detected_event.json

              COUNT=$(echo "$NEW_EVENTS" | jq 'length')
              if [ "$COUNT" -gt 0 ]; then
                echo "new_event_found=true" >> $GITHUB_OUTPUT

                FIRST_EVENT=$(echo "$NEW_EVENTS" | jq '.[0]')
                echo "$FIRST_EVENT" > detected_event.json

                jq -r '. as $e | to_entries[] | "\(.key)=\($e[.key])"' <<< "$FIRST_EVENT" >> $GITHUB_OUTPUT
              else
                echo "new_event_found=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "events_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "First commit - using src/data/events.json as new event source."
            echo "events_changed=true" >> $GITHUB_OUTPUT

            if [ -f src/data/events.json ]; then
              FIRST_EVENT=$(jq '.[0] // {}' src/data/events.json)
              echo "$FIRST_EVENT" > detected_event.json

              if [ "$FIRST_EVENT" != "{}" ]; then
                echo "new_event_found=true" >> $GITHUB_OUTPUT
                jq -r '. as $e | to_entries[] | "\(.key)=\($e[.key])"' <<< "$FIRST_EVENT" >> $GITHUB_OUTPUT
              else
                echo "new_event_found=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "new_event_found=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Clone subscriptions repo
        env:
          GH_DB_PAT: ${{ secrets.GH_DB_PAT }}
        run: |
          git clone https://x-access-token:${GH_DB_PAT}@github.com/sarveshmrao/communities-notification-subs.git subs_repo

      - name: Get all subscription files
        id: get-files
        run: |
          cd subs_repo
          ls *.json > ../subscription_files.txt || echo "" > ../subscription_files.txt
          echo "file_count=$(wc -l < ../subscription_files.txt)" >> $GITHUB_OUTPUT

      - name: Prepare notification payload
        id: prepare-payload
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ steps.detect-changes.outputs.new_event_found }}" = "true" ]; then
            TITLE="ðŸŽ‰ New Tech Event: ${{ steps.detect-changes.outputs.eventName }}"
            BODY="ðŸ“… ${{ steps.detect-changes.outputs.eventDate }} at ${{ steps.detect-changes.outputs.eventTime }} in ${{ steps.detect-changes.outputs.location }}"
            URL="${{ steps.detect-changes.outputs.eventLink }}"
            TEST_MODE=false
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TITLE="${{ inputs.title }}"
            BODY="${{ inputs.body }}"
            URL="${{ inputs.url }}"
            TEST_MODE=${{ inputs.test_mode }}
          else
            echo '{}' > notification_payload.json
            exit 0
          fi

          TITLE=$(echo "$TITLE" | cut -c1-100)
          BODY=$(echo "$BODY" | cut -c1-150)

          jq -n --arg title "$TITLE" \
                --arg body "$BODY" \
                --arg url "$URL" \
                --argjson test "$TEST_MODE" \
                --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                '{title: $title, body: $body, url: $url, test: $test, timestamp: $timestamp}' > notification_payload.json

          echo "Notification payload:"
          cat notification_payload.json

      - name: Send notifications to subscribers
        id: send-notifications
        if: steps.get-files.outputs.file_count != '0'
        env:
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
        run: |
          npm install -g web-push

          IS_TEST_MODE=false
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.test_mode }}" = "true" ]; then
            IS_TEST_MODE=true
          fi

          TOTAL_FILES=$(wc -l < subscription_files.txt)
          SENT=0
          FAIL=0

          if [ "$IS_TEST_MODE" = true ]; then
            head -3 subscription_files.txt > test.txt && mv test.txt subscription_files.txt
            TOTAL_FILES=$(wc -l < subscription_files.txt)
          fi

          for FILE in $(cat subscription_files.txt); do
            SUB=$(cat subs_repo/$FILE)
            ENDPOINT=$(echo "$SUB" | jq -r '.endpoint // empty')
            P256DH=$(echo "$SUB" | jq -r '.keys.p256dh // empty')
            AUTH=$(echo "$SUB" | jq -r '.keys.auth // empty')

            if [ -z "$ENDPOINT" ] || [ -z "$P256DH" ] || [ -z "$AUTH" ]; then
              echo "Invalid subscription in $FILE"
              FAIL=$((FAIL+1))
              continue
            fi

            if web-push send-notification \
              --endpoint="$ENDPOINT" \
              --key="$P256DH" \
              --auth="$AUTH" \
              --vapid-subject="mailto:you@example.com" \
              --vapid-pubkey="$VAPID_PUBLIC_KEY" \
              --vapid-pvtkey="$VAPID_PRIVATE_KEY" \
              --payload="$(cat notification_payload.json | jq -c .)" \
              --ttl=3600 2>/dev/null; then
              SENT=$((SENT+1))
            else
              FAIL=$((FAIL+1))
            fi

            sleep 0.2
          done

          echo "total_processed=$TOTAL_FILES" >> $GITHUB_OUTPUT
          echo "sent_count=$SENT" >> $GITHUB_OUTPUT
          echo "failed_count=$FAIL" >> $GITHUB_OUTPUT

      - name: Summary report
        run: |
          echo "## Push Notification Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Subscription Files: ${{ steps.get-files.outputs.file_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Sent: ${{ steps.send-notifications.outputs.sent_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Failed: ${{ steps.send-notifications.outputs.failed_count }}" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        run: rm -rf subs_repo *.json
